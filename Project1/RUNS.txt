Following values are used for conf.txt:

INIT_TIME 0
FIN_TIME 100000
ARRIVE_MIN 1
ARRIVE_MAX 150
QUIT_PROB 20
CPU_MIN 1
CPU_MAX 10
DISK1_MIN 20
DISK1_MAX 100
DISK2_MIN 20
DISK2_MAX 100

When I first finished the project, I had much bigger CPU_MAX and DISK_MAX values. While documenting the code, I realized that I missed the deadlock that occurs when there is no available space in any device queue. I was accidentally removing the process instead of moving it into the disk queue when disk deadlock occured, hence the CPU was prematurely terminating most of the processes, making it look like more jobs were being completed. After resolving the deadlock, I had to decrease these values. I tested the program with various seed numbers and there is a very small variation in the number of finished jobs each time.
After resolving the deadlock, I also had to increase the ARRIVE_MAX as there were too many jobs being generated for the server. Given the statistics, there seems to be no significant delay in processing each job and the parameters are consistent with the relative proportions in real life. Utilization of each device shows that the scheduling algorithm is currently very inefficient. One thing that can be done is to implement a scheduling algorithm that will paralellize the processes, after which it would be useful to increase the cpu queue capacity as the cpu is much faster than the disks and can handle much heavier workloads.

Deciding the inter-arrival times was a trial and error experience. Setting ARRIVE_MAX to lower values (such as 100), immediately resulted in much higher average response times in CPU (220 compared to 24). It could be determined however, by assuming that the possibility for each job to finish after compute time is over is SUM(from j=1 to n)(80/100)^(j-1)*(20/100), a job is most likely to be terminated after an average of arriving at a disk 3 times (There is a python file where I experimented with this idea: `calculating ARRIVE_MAX.py`). However it was difficult to estimate the number given the queue algorithm, so I tried different numbers and finally obtained stabil results at 150.